<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>@ViewData["Title"] safety Tag</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css">
    <style>
        .annotation {
            position: absolute;
            padding: 5px;
            border-radius: 4px;
            font-size: 25px;
            text-align: left;
            white-space: nowrap;
            max-width: 680px;
            overflow: hidden;
            text-overflow: ellipsis;
        }

        .table-custom {
            border-collapse: collapse;
            width: 100%;
            margin-top: 40px;
            max-width: 100%;
        }

            .table-custom th, .table-custom td {
                padding: 12px;
                text-align: center;
                border: 1px solid #ddd;
                font-size: 20px;
            }

            .table-custom th {
                background-color: #6c757d;
                color: #ffffff;
                font-weight: bold;
            }

            .table-custom tr:nth-child(even) {
                background-color: #f2f2f2;
            }

            .table-custom tr:hover {
                background-color: #e9ecef;
            }

            .table-custom td {
                font-size: 20px;
            }

        .table-responsive {
            max-height: 400px; /* Set a fixed height for the scrollable area */
            overflow-y: auto; /* Enable vertical scrolling */
        }

        

        /* Styling for the Toast */
        .toast-container {
            position: fixed;
            top: 50%;
            right: 0;
            transform: translateX(-50%);
            font-size: 50px;
        }


        .toast {
            opacity: 0; /* Hide by default */
            transition: opacity 0.5s ease-in-out; /* Smooth fade in/out */
            padding: 1rem; /* Tambah padding untuk toast */
            max-width: 500px; /* Sesuaikan lebar maksimum toast */
        }

            .toast.show {
                opacity: 1; /* Show when active */
            }

        .toast-body {
            font-size: 20px; /* Atur ukuran font di dalam body toast */
        }

        /* Additional Styling for Buttons */
        .btn {
            font-size: 23px; /* Increase font size for better readability */
            padding: 0.5rem 1rem; /* Adjust padding for a more balanced look */
        }

            /* Ensure there's some space between buttons */
            .btn + .btn {
                margin-left: 1rem; /* Add space between buttons */
            }

        /* Perbesar label */
        #uploadForm .form-group label {
            font-size: 25px; /* Mengatur ukuran font label */
            font-weight: bold; /* Membuat teks label lebih tebal */
        }

        /* Perbesar input file */
        #uploadForm .form-group input[type="file"] {
            font-size: 20px; /* Mengatur ukuran font input file */
            padding: 10px; /* Menambah ruang dalam input file */
            height: 55px; /* Mengatur tinggi input file */
            width: 100%; /* Membuat input file selebar form */
        }

        #uploadForm .form-group label {
            display: block;
            margin-bottom: 16px;
        }

        .container .d-flex {
            margin-bottom: 43px; /* Mengatur jarak 20px antara tombol dan elemen di bawahnya */
        }
    </style>

</head>
<body>
    <!-- Image Display -->
    <div class="text-center mt-4 position-relative" id="imageContainer">
        <img id="clickableImage" src="@Url.Content("~/uploads/template.jpg")" alt="Description" style="cursor: pointer;">
    </div>

    <!-- Reset and Data Buttons -->
    <div class="container mt-3">
        <div class="d-flex justify-content-end">
            <button type="button" class="btn btn-danger me-2" id="resetAllButton">Reset All</button>
            <button type="button" class="btn btn-primary" id="dataButton">Data</button>
            <a href="@Url.Action("Generate")" class="btn btn-primary">Preview</a>
        </div>
    </div>

    <!-- Form untuk upload gambar -->
    <form id="uploadForm" enctype="multipart/form-data">
        <div class="form-group">
            <label for="imageUpload">UPLOAD IMAGE</label>
            <input type="file" class="form-control" id="imageUpload" name="imageUpload" accept="image/*" required>
        </div>
        <button type="submit" class="btn btn-primary mt-2">Upload</button>
    </form>

    <!-- Tempat untuk menampilkan gambar yang di-upload -->
    <div id="uploadedImageContainer" class="mt-4">
        <!-- Gambar yang di-upload akan ditampilkan di sini -->
    </div>



    <!-- Modal for Data -->
    <div class="modal fade" id="dataModal" tabindex="-1" aria-labelledby="dataModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 style="font-size: 25px;" class="modal-title" id="dataModalLabel" >Data Inputan</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="table-responsive">
                        <table class="table table-custom">
                            <thead>
                                <tr>
                                    <th>Value</th>
                                    <th>X Coordinate</th>
                                    <th>Y Coordinate</th>
                                </tr>
                            </thead>
                            <tbody id="dataTableBody">
                                <!-- Data will be added here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Modal Structure for Adding Details -->
    <div style="font-size: 20px;" class="modal fade" id="coordinateModal" tabindex="-1" aria-labelledby="coordinateModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 style="font-size: 30px;" class="modal-title" id="coordinateModalLabel">Add Details</h5>
                </div>
                <div style="font-size: 25px;" class="modal-body">
                    <form id="detailsForm">
                        <div class="mb-3 form-section" id="noRegHSSESection">
                            <label for="noRegHSSEInput" class="form-label">Value</label>
                            <input style="font-size: 22px;" type="text" class="form-control" id="noRegHSSEInput" placeholder="Enter Value" />
                        </div>
                        <div class="mb-3">
                            <label for="xCoordInput" class="form-label">X Coordinate</label>
                            <input style="font-size: 22px;" type="number" class="form-control" id="xCoordInput" placeholder="Set X Coordinate"  />
                        </div>
                        <div class="mb-3">
                            <label for="yCoordInput" class="form-label">Y Coordinate</label>
                            <input style="font-size: 22px;" type="number" class="form-control" id="yCoordInput" placeholder="Set Y Coordinate"  />
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" id="saveButton">OK</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Toast Notification -->
    <div class="toast-container">
        <div id="resetToast" class="toast" role="alert" aria-live="assertive" aria-atomic="true" data-bs-delay="2000">
            <div class="toast-header">
                <strong class="me-auto">Notification</strong>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                All data has been successfully reset.
            </div>
        </div>
    </div>


    <!-- Bootstrap and jQuery Scripts -->
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Custom Script to Handle Click Event and Show Modal -->
    <script>
        var xCoord, yCoord;

        // Load data from local storage when the page loads
        window.onload = function () {
            loadData();
        };

        document.getElementById("clickableImage").addEventListener("click", function (event) {
            var rect = event.target.getBoundingClientRect();
            xCoord = event.clientX - rect.left + window.pageXOffset;
            yCoord = event.clientY - rect.top + window.pageYOffset;

            // Debugging: Cetak koordinat ke konsol
            console.log("xCoord: ", xCoord, "yCoord: ", yCoord);

            // Update modal input fields
            document.getElementById("xCoordInput").value = xCoord;
            document.getElementById("yCoordInput").value = yCoord;

            // Clear the input fields before showing the modal
            document.getElementById("noRegHSSEInput").value = '';

            // Show the modal
            var modal = new bootstrap.Modal(document.getElementById('coordinateModal'));
            modal.show();
        });



        document.getElementById("saveButton").addEventListener("click", function () {
            var noRegHSSE = document.getElementById("noRegHSSEInput").value;
            xCoord = parseInt(document.getElementById("xCoordInput").value);
            yCoord = parseInt(document.getElementById("yCoordInput").value);

            // Add data to table
            var dataTableBody = document.getElementById("dataTableBody");
            var row = document.createElement("tr");
            row.innerHTML = `
                                        <td>${noRegHSSE}</td>
                                        <td>${xCoord}</td>
                                        <td>${yCoord}</td>
                                    `;
            dataTableBody.appendChild(row);

            // Save data to local storage
            saveData();

            // Send data to server using AJAX
            $.ajax({
                type: "POST",
                url: "@Url.Action("Create", "Home")",
                contentType: "application/json",
                data: JSON.stringify({
                    "Value": noRegHSSE,
                    "XCoordinate": xCoord,
                    "YCoordinate": yCoord
                }),
                success: function (response) {
                    console.log("Data saved successfully");
                },
                error: function (error) {
                    console.error("Error saving data", error);
                }
            });

            // Hide the modal
            var modal = bootstrap.Modal.getInstance(document.getElementById('coordinateModal'));
            modal.hide();

            // Add annotation to the image
            var annotation = document.createElement("div");
            annotation.className = "annotation";
            annotation.style.left = xCoord + "px";
            annotation.style.top = yCoord + "px";
            annotation.textContent = noRegHSSE;

            var imageContainer = document.getElementById("imageContainer");
            imageContainer.appendChild(annotation);
        });

        document.getElementById("resetAllButton").addEventListener("click", function () {
            // Clear all rows in the table
            var dataTableBody = document.getElementById("dataTableBody");
            dataTableBody.innerHTML = '';

            // Clear the input fields in the modal form
            document.getElementById("noRegHSSEInput").value = '';
            document.getElementById("xCoordInput").value = '';
            document.getElementById("yCoordInput").value = '';

            // Clear local storage
            localStorage.removeItem('inputData');
            localStorage.removeItem('uploadedImageUrl'); // Clear the uploaded image URL

            // Remove all annotations from the image
            var imageContainer = document.getElementById("imageContainer");
            var annotations = imageContainer.getElementsByClassName("annotation");
            while (annotations.length > 0) {
                annotations[0].parentNode.removeChild(annotations[0]);
            }

            // Send request to the server to delete all records from the database
            $.ajax({
                type: "POST",
                url: "@Url.Action("ResetAll", "Home")",
                success: function () {
                    console.log("Database data cleared successfully");

                    // Show toast notification
                    var toast = new bootstrap.Toast(document.getElementById('resetToast'));
                    toast.show();
                },
                error: function (error) {
                    console.error("Error clearing database data", error);
                }
            });

            // Hide the modal if it is open
            var modal = bootstrap.Modal.getInstance(document.getElementById('coordinateModal'));
            if (modal) {
                modal.hide();
            }

            // Clear uploaded image from the UI
            $("#uploadedImageContainer").html('');
        });



        document.getElementById("dataButton").addEventListener("click", function () {
            // Fetch data from the server using AJAX
            $.ajax({
                type: "GET",
                url: "@Url.Action("List", "Home")",
                contentType: "application/json",
                success: function (data) {
                    console.log("Data fetched successfully:", data); // Log the fetched data
                    // Populate the table with data from the server
                    var dataTableBody = document.getElementById("dataTableBody");
                    dataTableBody.innerHTML = ''; // Clear existing rows
                    data.forEach(function (tag) {
                        var row = document.createElement("tr");
                        row.innerHTML = `
                                                    <td>${tag.value}</td>
                                                    <td>${tag.xCoordinate}</td>
                                                    <td>${tag.yCoordinate}</td>
                                                `;
                        dataTableBody.appendChild(row);

                        // Add annotation to the image
                        var annotation = document.createElement("div");
                        annotation.className = "annotation";
                        annotation.style.left = tag.xCoordinate + "px";
                        annotation.style.top = tag.yCoordinate + "px";
                        annotation.textContent = tag.value;

                        var imageContainer = document.getElementById("imageContainer");
                        imageContainer.appendChild(annotation);
                    });

                    // Show the modal
                    var modal = new bootstrap.Modal(document.getElementById('dataModal'));
                    modal.show();
                },
                error: function (error) {
                    console.error("Error fetching data", error);
                }
            });
        });

        function saveData() {
            var data = [];
            var rows = document.querySelectorAll("#dataTableBody tr");
            rows.forEach(function (row) {
                var noRegHSSE = row.cells[0].innerText;
                var xCoord = row.cells[1].innerText;
                var yCoord = row.cells[2].innerText;
                data.push({ noRegHSSE: noRegHSSE, xCoord: xCoord, yCoord: yCoord });
            });

            localStorage.setItem('inputData', JSON.stringify(data));
        }

        function loadData() {
            var data = JSON.parse(localStorage.getItem('inputData'));
            if (data) {
                var dataTableBody = document.getElementById("dataTableBody");
                data.forEach(function (item) {
                    var row = document.createElement("tr");
                    row.innerHTML = `
                                                <td>${item.noRegHSSE}</td>
                                                <td>${item.xCoord}</td>
                                                <td>${item.yCoord}</td>
                                            `;
                    dataTableBody.appendChild(row);

                    // Add annotation to the image
                    var annotation = document.createElement("div");
                    annotation.className = "annotation";
                    annotation.style.left = item.xCoord + "px";
                    annotation.style.top = item.yCoord + "px";
                    annotation.textContent = item.noRegHSSE;

                    var imageContainer = document.getElementById("imageContainer");
                    imageContainer.appendChild(annotation);
                });
            }
        }

        $(document).ready(function () {
            $("#uploadForm").submit(function (event) {
                event.preventDefault();
                var formData = new FormData(this);

                $.ajax({
                    type: "POST",
                    url: "@Url.Action("UploadImage", "Home")",
                    data: formData,
                    contentType: false,
                    processData: false,
                    success: function (response) {
                        // Simpan URL gambar di localStorage
                        localStorage.setItem('uploadedImageUrl', response.imageUrl);

                        // Tambahkan parameter acak untuk menghindari cache
                        var updatedImageUrl = response.imageUrl + '?t=' + new Date().getTime();

                        // Tampilkan gambar yang di-upload
                        var uploadedImageContainer = $("#uploadedImageContainer");
                        

                        // Update src gambar utama
                        $("#clickableImage").prop("src", updatedImageUrl);

                        // Tambahkan event listener ke gambar yang di-upload
                        $("#uploadedImage").on("click", function (event) {
                            var rect = this.getBoundingClientRect();
                            xCoord = event.clientX - rect.left + window.pageXOffset;
                            yCoord = event.clientY - rect.top + window.pageYOffset;

                            // Update modal input fields
                            document.getElementById("xCoordInput").value = xCoord;
                            document.getElementById("yCoordInput").value = yCoord;

                            // Clear the input fields before showing the modal
                            document.getElementById("noRegHSSEInput").value = '';

                            // Show the modal
                            var modal = new bootstrap.Modal(document.getElementById('coordinateModal'));
                            modal.show();
                        });
                    },

                    error: function (error) {
                        console.error("Error uploading image", error);
                    }
                });
            });

            // Periksa localStorage saat halaman dimuat
            var storedImageUrl = localStorage.getItem('uploadedImageUrl');
            if (storedImageUrl) {
                var updatedImageUrl = storedImageUrl + '?t=' + new Date().getTime();
                
                $("#clickableImage").prop("src", updatedImageUrl);

                // Tambahkan event listener ke gambar yang di-upload
                $("#uploadedImage").on("click", function (event) {
                    var rect = this.getBoundingClientRect();
                    xCoord = event.clientX - rect.left + window.pageXOffset;
                    yCoord = event.clientY - rect.top + window.pageYOffset;

                    // Update modal input fields
                    document.getElementById("xCoordInput").value = xCoord;
                    document.getElementById("yCoordInput").value = yCoord;

                    // Clear the input fields before showing the modal
                    document.getElementById("noRegHSSEInput").value = '';

                    // Show the modal
                    var modal = new bootstrap.Modal(document.getElementById('coordinateModal'));
                    modal.show();
                });
            }

        });
    </script>
</body>
</html>